// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package traceroute

import (
	"context"
	"sync"
)

// Ensure, that icmpListenerMock does implement icmpListener.
// If this is not the case, regenerate this file with moq.
var _ icmpListener = &icmpListenerMock{}

// icmpListenerMock is a mock implementation of icmpListener.
//
//	func TestSomethingThatUsesicmpListener(t *testing.T) {
//
//		// make and configure a mocked icmpListener
//		mockedicmpListener := &icmpListenerMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			ReadFunc: func(ctx context.Context) (icmpPacket, error) {
//				panic("mock out the Read method")
//			},
//		}
//
//		// use mockedicmpListener in code that requires icmpListener
//		// and then make assertions.
//
//	}
type icmpListenerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ReadFunc mocks the Read method.
	ReadFunc func(ctx context.Context) (icmpPacket, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockClose sync.RWMutex
	lockRead  sync.RWMutex
}

// Close calls CloseFunc.
func (mock *icmpListenerMock) Close() error {
	if mock.CloseFunc == nil {
		panic("icmpListenerMock.CloseFunc: method is nil but icmpListener.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedicmpListener.CloseCalls())
func (mock *icmpListenerMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *icmpListenerMock) Read(ctx context.Context) (icmpPacket, error) {
	if mock.ReadFunc == nil {
		panic("icmpListenerMock.ReadFunc: method is nil but icmpListener.Read was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(ctx)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedicmpListener.ReadCalls())
func (mock *icmpListenerMock) ReadCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}
