// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package traceroute

import (
	"context"
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			RunFunc: func(ctx context.Context, targets []Target, opts *Options) (Result, error) {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context, targets []Target, opts *Options) (Result, error)

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Targets is the targets argument value.
			Targets []Target
			// Opts is the opts argument value.
			Opts *Options
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *ClientMock) Run(ctx context.Context, targets []Target, opts *Options) (Result, error) {
	if mock.RunFunc == nil {
		panic("ClientMock.RunFunc: method is nil but Client.Run was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Targets []Target
		Opts    *Options
	}{
		Ctx:     ctx,
		Targets: targets,
		Opts:    opts,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(ctx, targets, opts)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedClient.RunCalls())
func (mock *ClientMock) RunCalls() []struct {
	Ctx     context.Context
	Targets []Target
	Opts    *Options
} {
	var calls []struct {
		Ctx     context.Context
		Targets []Target
		Opts    *Options
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
