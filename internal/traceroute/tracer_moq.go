// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package traceroute

import (
	"context"
	"sync"
)

// Ensure, that tracerMock does implement tracer.
// If this is not the case, regenerate this file with moq.
var _ tracer = &tracerMock{}

// tracerMock is a mock implementation of tracer.
//
//	func TestSomethingThatUsestracer(t *testing.T) {
//
//		// make and configure a mocked tracer
//		mockedtracer := &tracerMock{
//			traceFunc: func(ctx context.Context, target Target, opts Options) error {
//				panic("mock out the trace method")
//			},
//		}
//
//		// use mockedtracer in code that requires tracer
//		// and then make assertions.
//
//	}
type tracerMock struct {
	// traceFunc mocks the trace method.
	traceFunc func(ctx context.Context, target Target, opts Options) error

	// calls tracks calls to the methods.
	calls struct {
		// trace holds details about calls to the trace method.
		trace []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Target is the target argument value.
			Target Target
			// Opts is the opts argument value.
			Opts Options
		}
	}
	locktrace sync.RWMutex
}

// trace calls traceFunc.
func (mock *tracerMock) trace(ctx context.Context, target Target, opts Options) error {
	if mock.traceFunc == nil {
		panic("tracerMock.traceFunc: method is nil but tracer.trace was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Target Target
		Opts   Options
	}{
		Ctx:    ctx,
		Target: target,
		Opts:   opts,
	}
	mock.locktrace.Lock()
	mock.calls.trace = append(mock.calls.trace, callInfo)
	mock.locktrace.Unlock()
	return mock.traceFunc(ctx, target, opts)
}

// traceCalls gets all the calls that were made to trace.
// Check the length with:
//
//	len(mockedtracer.traceCalls())
func (mock *tracerMock) traceCalls() []struct {
	Ctx    context.Context
	Target Target
	Opts   Options
} {
	var calls []struct {
		Ctx    context.Context
		Target Target
		Opts   Options
	}
	mock.locktrace.RLock()
	calls = mock.calls.trace
	mock.locktrace.RUnlock()
	return calls
}
